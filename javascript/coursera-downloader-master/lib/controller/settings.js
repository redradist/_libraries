// Generated by CoffeeScript 1.6.3
var SettingsController, trim;

trim = function(str) {
  str = str.replace(/^\s+/g, '');
  return str.replace(/\s+$/g, '');
};

SettingsController = (function() {
  SettingsController.prototype.tasksMap = {};

  SettingsController.prototype.tasks = [];

  function SettingsController($scope, store, classesService, timeout) {
    var _this = this;
    this.store = store;
    this.classesService = classesService;
    this.timeout = timeout;
    this.incomingTasks = this.store.incomingTasks();
    this.scope = $scope;
    $scope.filePattern = '#{course} #{sectionIndex}.#{lectureIndex} #{lecture}';
    $scope.incomings = this.incomingTasks;
    $scope.filename = function(section, lecture, sectionIndex, lectureIndex) {
      return _this.filename(section, lecture, sectionIndex, lectureIndex);
    };
    $scope.hasIncomingTasks = this.hasIncomingTasks();
    $scope.uncompleted = function() {
      return _this.uncompleted();
    };
    $scope.selectAll = function() {
      return _this.selected(true);
    };
    $scope.selectNone = function() {
      return _this.selected(false);
    };
    $scope.cancel = function() {
      $('#incomingModal').modal('hide');
      return _this.clearIncoming();
    };
    $scope.download = function() {
      $('#incomingModal').modal('hide');
      return _this.download();
    };
    $scope.taskIcon = function(task) {
      return _this.taskIcon(task);
    };
    if (this.hasIncomingTasks()) {
      $('#incomingModal').modal();
    }
    chrome.downloads.onChanged.addListener(function(downloadDelta) {
      return _this.downloadChange(downloadDelta);
    });
  }

  SettingsController.prototype.clearIncoming = function() {
    return this.store.clearIncoming();
  };

  SettingsController.prototype.download = function() {
    var lecture, lectureIndex, section, sectionIndex, _i, _j, _len, _len1, _ref, _ref1;
    this.tasksMap = {};
    this.tasks = [];
    _ref = this.incomingTasks.sections;
    for (sectionIndex = _i = 0, _len = _ref.length; _i < _len; sectionIndex = ++_i) {
      section = _ref[sectionIndex];
      _ref1 = section.lectures;
      for (lectureIndex = _j = 0, _len1 = _ref1.length; _j < _len1; lectureIndex = ++_j) {
        lecture = _ref1[lectureIndex];
        if (lecture.selected) {
          this.tasks.push(this.getTask(section, lecture, sectionIndex, lectureIndex));
        }
      }
    }
    this.clearIncoming();
    this.scope.tasks = this.tasks;
    return this.prepareTasks(this.tasks, 0);
  };

  SettingsController.prototype.prepareTasks = function(tasks, index) {
    var _this = this;
    if (index < tasks.length) {
      this.prepareTask(tasks[index]);
      return this.timeout(function() {
        return _this.prepareTasks(tasks, index + 1);
      }, 100);
    }
  };

  SettingsController.prototype.prepareTask = function(task) {
    task.video = this.getVideoLink(task.video);
    task.state = 'time';
    return this.downloadTask(task);
  };

  SettingsController.prototype.getTask = function(section, lecture, sectionIndex, lectureIndex) {
    return {
      filename: this.filename(section, lecture, sectionIndex, lectureIndex),
      video: lecture.video
    };
  };

  SettingsController.prototype.filename = function(section, lecture, sectionIndex, lectureIndex) {
    var name;
    name = this.scope.filePattern + '.mp4';
    return name.interpolate({
      course: this.scope.incomings.course,
      section: section.title,
      lecture: lecture.title,
      sectionIndex: sectionIndex,
      lectureIndex: lectureIndex
    });
  };

  SettingsController.prototype.selected = function(value) {
    var lecture, section, _i, _len, _ref, _results;
    _ref = this.incomingTasks.sections;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      section = _ref[_i];
      _results.push((function() {
        var _j, _len1, _ref1, _results1;
        _ref1 = section.lectures;
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          lecture = _ref1[_j];
          _results1.push(lecture.selected = value);
        }
        return _results1;
      })());
    }
    return _results;
  };

  SettingsController.prototype.hasIncomingTasks = function() {
    var _ref, _ref1;
    return ((_ref = this.incomingTasks) != null ? (_ref1 = _ref.sections) != null ? _ref1.length : void 0 : void 0) > 0;
  };

  SettingsController.prototype.uncompleted = function() {
    var count, _ref;
    count = 0;
    if ((_ref = this.tasks) != null) {
      _ref.map(function(task) {
        if ((task != null ? task.state : void 0) !== 'ok') {
          return count++;
        }
      });
    }
    return count;
  };

  SettingsController.prototype.taskIcon = function(task) {
    if (!task.state) {
      return 'icon-refresh';
    }
    return "icon-" + task.state;
  };

  SettingsController.prototype.getVideoLink = function(link) {
    var result,
      _this = this;
    result = '';
    $.ajax({
      url: link,
      success: function(data) {
        var match;
        match = data.match(/.*?(<source.*?>).*/g);
        return result = trim(match[0]).replace(/^.*?src=./, '').replace(/\".*$/, '');
      },
      async: false
    });
    return result;
  };

  SettingsController.prototype.downloadTask = function(task) {
    var params,
      _this = this;
    params = {
      url: task.video,
      filename: task.filename.clear()
    };
    console.log(params);
    return chrome.downloads.download(params, function(id) {
      return _this.tasksMap[id] = task;
    });
  };

  SettingsController.prototype.downloadChange = function(downloadDelta) {
    var _this = this;
    return this.timeout(function() {
      var task, _ref;
      task = _this.tasksMap[downloadDelta.id];
      task.state = 'circle-arrow-down';
      if (((_ref = downloadDelta.state) != null ? _ref.current : void 0) === 'complete') {
        return task.state = 'ok';
      }
    });
  };

  return SettingsController;

})();

String.prototype.interpolate = function(values) {
  return this.replace(/#{(\w*)}/g, function(ph, key) {
    return values[key];
  });
};

String.prototype.clear = function() {
  var str;
  str = this.replace(/.\[.*?\]/g, '');
  return str.replace(/[\:\/\\,\?]+/g, '');
};

SettingsController.$inject = ['$scope', 'store', 'classesService', '$timeout'];
